{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { selectSearchTerm } from \"../search/search.slice\";\nimport photos from \"./photos.data.js\";\nconst initialState = {\n  photos\n};\nconst options = {\n  name: \"photos\",\n  initialState,\n  reducers: {\n    // Task 1: Create an `addPhoto()` case reducer that adds a photo to state.photos.\n    // Task 1 Hint: You can use state.photos.unshift()\n    // `unshift()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n    addPhoto: (state, action) => {\n      state.photos.unshift(action.payload);\n    },\n    // Task 6: Create an `removePhoto()` case reducer that removes a photo from state.photos\n    // Task 6 Hint: You can use state.photos.splice()\n    // `splice()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    removePhoto: (state, action) => {\n      const photoIndexToRemove = state.photos.findIndex(photo => photo.id === action.payload);\n\n      if (photoIndexToRemove !== -1) {\n        state.photos.splice(photoIndexToRemove, 1);\n      }\n    }\n  }\n};\nconst photosSlice = createSlice(options);\nexport const {\n  addPhoto,\n  removePhoto\n} = photosSlice.actions;\nexport default photosSlice.reducer;\nexport const selectAllPhotos = state => state.photos.photos;\nexport const selectFilteredPhotos = state => {\n  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term\n  const searchTerm = selectSearchTerm(state);\n\n  if (!searchTerm) {\n    return state.photos.photos; // Return all photos if there is no search term\n  }\n\n  const filteredPhotos = state.photos.photos.filter(photo => photo.caption.toLowerCase().includes(searchTerm.toLowerCase()));\n  return filteredPhotos;\n};","map":{"version":3,"names":["createSlice","selectSearchTerm","photos","initialState","options","name","reducers","addPhoto","state","action","unshift","payload","removePhoto","photoIndexToRemove","findIndex","photo","id","splice","photosSlice","actions","reducer","selectAllPhotos","selectFilteredPhotos","searchTerm","filteredPhotos","filter","caption","toLowerCase","includes"],"sources":["/Users/elkhalifa/Desktop/redux-assessment/src/features/photos/photos.slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { selectSearchTerm } from \"../search/search.slice\";\nimport photos from \"./photos.data.js\";\n\nconst initialState = {\n  photos,\n};\n\nconst options = {\n  name: \"photos\",\n  initialState,\n  reducers: {\n    // Task 1: Create an `addPhoto()` case reducer that adds a photo to state.photos.\n    // Task 1 Hint: You can use state.photos.unshift()\n    // `unshift()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n    addPhoto: (state, action) => {\n      state.photos.unshift(action.payload);\n    },\n    // Task 6: Create an `removePhoto()` case reducer that removes a photo from state.photos\n    // Task 6 Hint: You can use state.photos.splice()\n    // `splice()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    removePhoto: (state, action) => {\n      const photoIndexToRemove = state.photos.findIndex(\n        (photo) => photo.id === action.payload\n      );\n\n      if (photoIndexToRemove !== -1) {\n        state.photos.splice(photoIndexToRemove, 1);\n      }\n    },\n  },\n};\n\nconst photosSlice = createSlice(options);\n\nexport const { addPhoto, removePhoto } = photosSlice.actions;\n\nexport default photosSlice.reducer;\n\nexport const selectAllPhotos = (state) => state.photos.photos;\nexport const selectFilteredPhotos = (state) => {\n  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term\n\n  const searchTerm = selectSearchTerm(state);\n\n  if (!searchTerm) {\n    return state.photos.photos; // Return all photos if there is no search term\n  }\n\n  const filteredPhotos = state.photos.photos.filter(photo =>\n    photo.caption.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return filteredPhotos;\n  \n};\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,YAAY,GAAG;EACnBD;AADmB,CAArB;AAIA,MAAME,OAAO,GAAG;EACdC,IAAI,EAAE,QADQ;EAEdF,YAFc;EAGdG,QAAQ,EAAE;IACR;IACA;IACA;IACAC,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAACN,MAAN,CAAaQ,OAAb,CAAqBD,MAAM,CAACE,OAA5B;IACD,CANO;IAOR;IACA;IACA;IACAC,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAMI,kBAAkB,GAAGL,KAAK,CAACN,MAAN,CAAaY,SAAb,CACxBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACE,OADN,CAA3B;;MAIA,IAAIE,kBAAkB,KAAK,CAAC,CAA5B,EAA+B;QAC7BL,KAAK,CAACN,MAAN,CAAae,MAAb,CAAoBJ,kBAApB,EAAwC,CAAxC;MACD;IACF;EAlBO;AAHI,CAAhB;AAyBA,MAAMK,WAAW,GAAGlB,WAAW,CAACI,OAAD,CAA/B;AAEA,OAAO,MAAM;EAAEG,QAAF;EAAYK;AAAZ,IAA4BM,WAAW,CAACC,OAA9C;AAEP,eAAeD,WAAW,CAACE,OAA3B;AAEA,OAAO,MAAMC,eAAe,GAAIb,KAAD,IAAWA,KAAK,CAACN,MAAN,CAAaA,MAAhD;AACP,OAAO,MAAMoB,oBAAoB,GAAId,KAAD,IAAW;EAC7C;EAEA,MAAMe,UAAU,GAAGtB,gBAAgB,CAACO,KAAD,CAAnC;;EAEA,IAAI,CAACe,UAAL,EAAiB;IACf,OAAOf,KAAK,CAACN,MAAN,CAAaA,MAApB,CADe,CACa;EAC7B;;EAED,MAAMsB,cAAc,GAAGhB,KAAK,CAACN,MAAN,CAAaA,MAAb,CAAoBuB,MAApB,CAA2BV,KAAK,IACrDA,KAAK,CAACW,OAAN,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCL,UAAU,CAACI,WAAX,EAArC,CADqB,CAAvB;EAIA,OAAOH,cAAP;AAED,CAfM"},"metadata":{},"sourceType":"module"}